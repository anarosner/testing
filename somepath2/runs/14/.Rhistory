names(h.flow)<-c("year","month")
h.flow$flow<-histflow
h.flow$season_year<-f.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow<-hist.weather[,c("YEAR","MONTH")]
names(h.flow)<-c("year","month")
h.flow$flow<-histflow
h.flow$season_year<-h.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow[1:20,]
h.flow[h.flow$month==12,"season-year"]<-h.flow[h.flow$month==12,"year"]-1
h.flow[1:20,]
h.flow<-hist.weather[,c("YEAR","MONTH")]
names(h.flow)<-c("year","month")
h.flow$flow<-histflow
h.flow$season_year<-h.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow[h.flow$month==12,"season_year"]<-h.flow[h.flow$month==12,"year"]+1
h.flow[1:20,]
s.flow<-stoc.weather[,c("YEAR","MONTH")]
names(s.flow)<-c("year","month")
s.flow$flow<-stocflow
s.flow$season_year<-s.flow$year
s.flow$season<-0
s.flow[s.flow$month %in% c(3,4,5),"season"]<-1
s.flow[s.flow$month %in% c(6,7,8),"season"]<-2
s.flow[s.flow$month %in% c(9,10,11),"season"]<-3
s.flow[s.flow$month %in% c(12,1,2),"season"]<-4
s.flow[s.flow$month==12,"season_year"]<-s.flow[s.flow$month==12,"year"]+1
s.flow[1:20,]
h.flow<-hist.weather[,c("YEAR","MONTH")]
names(h.flow)<-c("year","month")
h.flow$flow<-histflow
# h.flow$season_year<-h.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow[h.flow$month==12,"year"]<-h.flow[h.flow$month==12,"year"]+1
# h.seasonal_flow<-aggregate(h.flow,by=list())
s.flow<-stoc.weather[,c("YEAR","MONTH")]
names(s.flow)<-c("year","month")
s.flow$flow<-stocflow
# s.flow$season_year<-s.flow$year
s.flow$season<-0
s.flow[s.flow$month %in% c(3,4,5),"season"]<-1
s.flow[s.flow$month %in% c(6,7,8),"season"]<-2
s.flow[s.flow$month %in% c(9,10,11),"season"]<-3
s.flow[s.flow$month %in% c(12,1,2),"season"]<-4
s.flow[s.flow$month==12,"year"]<-s.flow[s.flow$month==12,"year"]+1
h.flow[1:20]
h.flow[1:20,]
s.flow[1:20,]
getwd()
for (i in 1:4)
write.csv(h.flow[h.flow$season==i,c("year","flow")],paste0("season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
for (i in 1:4) {
write.csv(h.flow[h.flow$season==i,c("year","flow")],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.flow[h.flow$season==i,c("year","flow")],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
h.seasonal<-aggregate(h.flow,by=list(Year=h.flow$year,Season=h.flow$season),FUN="mean")
h.seasonal[1:10,]
h.seasonal<-aggregate(h.flow,by=list(Season=h.flow$season,Year=h.flow$year),FUN="mean")
h.seasonal[1:10,]
h.seasonal<-aggregate(h.flow,by=list(Season=h.flow$season,Year=h.flow$year),FUN="mean")[,c(2,1,5)]
h.seasonal[1:10,]
s.seasonal<-aggregate(s.flow,by=list(Season=s.flow$season,Year=s.flow$year),FUN="mean")[,c(2,1,5)]
for (i in 1:4) {
write.csv(h.seasonal[h.seasonal$Season==i,],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[s.seasonal$Season==i,],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
for (i in 1:4) {
write.csv(h.seasonal[h.seasonal$Season==i,],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[s.seasonal$Season==i,],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
### csv output and new plots
#what units are stocflow/histflow in?
h.flow<-hist.weather[,c("YEAR","MONTH")]
names(h.flow)<-c("year","month")
h.flow$Flow<-histflow
# h.flow$season_year<-h.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow[h.flow$month==12,"year"]<-h.flow[h.flow$month==12,"year"]+1
h.seasonal<-aggregate(h.flow,by=list(Season=h.flow$season,Year=h.flow$year),FUN="mean")[,c(2,1,5)]
s.flow<-stoc.weather[,c("YEAR","MONTH")]
names(s.flow)<-c("year","month")
s.flow$Flow<-stocflow
# s.flow$season_year<-s.flow$year
s.flow$season<-0
s.flow[s.flow$month %in% c(3,4,5),"season"]<-1
s.flow[s.flow$month %in% c(6,7,8),"season"]<-2
s.flow[s.flow$month %in% c(9,10,11),"season"]<-3
s.flow[s.flow$month %in% c(12,1,2),"season"]<-4
s.flow[s.flow$month==12,"year"]<-s.flow[s.flow$month==12,"year"]+1
s.seasonal<-aggregate(s.flow,by=list(Season=s.flow$season,Year=s.flow$year),FUN="mean")[,c(2,1,5)]
for (i in 1:4) {
write.csv(h.seasonal[h.seasonal$Season==i,c("Year","Flow")],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[s.seasonal$Season==i,],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
for (i in 1:4) {
write.csv(h.seasonal[h.seasonal$Season==i,c("Year","Flow")],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[s.seasonal$Season==i,],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
library(ggplot2)
library(fMultivar)
library(animation)
library(grid)
setwd("C:/Documents/GitHub/testing/temp_files/from Ben")
load("gcmData.RData")
load("tempGCMData.RData")
xOffsetContour <- -1
yOffsetContour <- -1
currentOffset <- 0.25
xGCMOffset <- seq( xOffsetContour+currentOffset,0.51,0.1 )
yGCMOffset <- seq( yOffsetContour+currentOffset,0.51,0.1 )
xGCMOffsetSD <- seq( 0.04,0.45,length.out=length(xGCMOffset) )
yGCMOffsetSD <- seq( 0.04,0.51,length.out=length(yGCMOffset) )
rm(list=ls())
setwd("C:/Documents/GitHub/testing/temp_files/from Ben")
load("gcmData.RData")
load("tempGCMData.RData")
xOffsetContour <- -1
yOffsetContour <- -1
currentOffset <- 0.25
xGCMOffset <- seq( xOffsetContour+currentOffset,0.51,0.1 )
yGCMOffset <- seq( yOffsetContour+currentOffset,0.51,0.1 )
xGCMOffsetSD <- seq( 0.04,0.45,length.out=length(xGCMOffset) )
yGCMOffsetSD <- seq( 0.04,0.51,length.out=length(yGCMOffset) )
x = (-20:20)/10
X = grid2d(x)
z = dnorm2d(X$x-xOffsetContour, X$y-yOffsetContour, rho = -0.65)
#Z = list(x = x, y = x, z = matrix(z, ncol = length(x)))
#Z = data.frame(x = x, y = x, z = matrix(z, ncol = length(x)))
#persp(Z, theta = -40, phi = 30, col = "steelblue")
ggZ <- data.frame(cbind(x=X$x, y=X$y, z=z))
p <- ggplot(data=ggZ, aes(x=x,y=y)) +
geom_tile(aes(fill = z)) +
stat_contour(data=ggZ,aes(z=z)) +
stat_contour(data=ggZ,aes(z=z), bins=1.8, colour='white', size=2)
# in new version of ggplot, need to separate lines with different dimensions in the aes()
xSlope <- 0.2; ySlope <- 0.1
xInt <- xOffsetContour+currentOffset
yInt <- yOffsetContour+currentOffset
lineTrace <- data.frame(index = ( 0:( length(xGCMOffset) -1 ) ))
lineTrace$x = lineTrace$index * xSlope + xInt
lineTrace$y = lineTrace$index * ySlope + yInt
pExtinct <- data.frame( x=1:( length(xGCMOffset)) )
pExtinct$y <- pExtinct$x*0.1
################
# set viewport to insert second graph
vp <- viewport(width = 0.3, height = 0.3, x = 0.97, y = unit(0.9, "lines"), just = c("right","bottom"))
## set some options first
oopt = ani.options( interval = 0.8, nmax = length(xGCMOffset) )
## use a loop to create images one by one
saveHTML({
for (i in 1:ani.options("nmax")) {
print(i)
gcm <- data.frame(xx=rnorm(100,xGCMOffset[i],xGCMOffsetSD[i]),yy=rnorm(100,yGCMOffset[i],yGCMOffsetSD[i]))
print(
p+
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=20) +
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=10, colour='white')+
geom_point(data=gcm, aes(x=xx,y=yy), colour='yellow') +
geom_point( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue', size=3) +
geom_line( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue') +
scale_x_continuous('Standardized air temperature') +
scale_y_continuous('Standardized precipitation')+
ggtitle(i)
)
print(
ggplot(pExtinct[1:i,], aes(x,y))+
geom_point()+
scale_x_continuous(lim=c(0,ani.options("nmax")), 'Time') +
scale_y_continuous(lim=c(0,1.1), 'Proportion of gcm > lambda=1')+
theme(axis.title.x = element_text( size=10 ),
axis.title.y = element_text( size=10 )),
vp = vp
)
#theme_set(theme_bw())
ani.pause() ## pause for a while (’interval’)
}
},
img.name = "countourPlots", imgdir = "plots", htmlfile = "random1.html",
autobrowse = TRUE,
verbose=FALSE
)
write.csv(h.seasonal[,c("Year","Flow")],paste0("historic_seasonal_flow.csv"),row.names = FALSE,quote=FALSE)
rm(list=ls())
setwd("C:/Documents/GitHub/testing/r")
testingargs<-list(basin_dir="C:/Documents/GitHub/somepath/basins",run_dir="C:/Documents/GitHub/testing/somepath2/runs/14",data_dir="C:/Documents/GitHub/somepath/data")
# testingargs<-list(basin_dir="C:/ALR/GitHub/somepath/basins",run_dir="C:/ALR/GitHub/testing/somepath2/runs/14",data_dir="C:/ALR/GitHub/somepath/data")
source("StreamFlowModel.R")
setwd(paste0(data_dir,"/flow_data"))
GCMDays <- read.table("Days_For_ABCDE_GCM.txt",header=TRUE)
parms <- read.table("Parms_Web.txt",header=TRUE)
#Read in weather generated from Climate Code
setwd(preceding$climate_dir)
stoc.weather <- read.table("monthly_weather.txt",header=TRUE)
hist.weather <- read.table("h_monthly_weather.txt", header=TRUE)
s_calib_num <- length(stoc.weather$MONTH)
h_calib_num <- length(hist.weather$MONTH)
#Read in basin paramters
basin_id <- parse.param("basin_id")
basin_param <- fromJSON(file=paste0(basin_dir,"/",basin_id,"/param.json"))
basin_area <- basin_param$area
basin_lat <- basin_param$lat
basin_long <- basin_param$long
lat <- basin_param$lat
long <- basin_param$long
#Get the fitted parameters for the basin
{
if(basin_id == "west_brook"){
#Westbrook Example
basin_area <- 10.81
parameters <- c(0.934, 350.2514, 0.0000014, 0.62498, 0.4623, -0.7021, 9.9952) #SCE
#parameters <- c(0.965,300,0.15,0.8,0.4,-0.5,15) #Bayes eyeball
}
else {
a1 <- abs(parms$Lat)/57.29577951	#put everything in radians I think...
b1 <- abs(parms$Long)/57.29577951
a2<- abs(rep(lat,length(parms$Lat)))/57.29577951
b2<- abs(rep(long,length(parms$Long)))/57.29577951
h <- 6371*acos(round(sin(a1)*sin(a2)+cos(a1)*cos(a2)*cos(b1-b2),10)) #use law of cosines to compute distance 6371 km is radius of earth I think...
#Find nearest Area-like gages -> use window of 30 kilometers, select smallest area gage, if none exist select nearest gage
circle.radius <- 30 #in kilometers
in.circle <- which(h < circle.radius)
if (length(in.circle) == 0) {
temp.parms <- parms[which(h == min(h)),]
parameters <- c(temp.parms$A,temp.parms$B,temp.parms$C,temp.parms$D,temp.parms$E,temp.parms$F,temp.parms$DIF,temp.parms$Sint,temp.parms$Gint,temp.parms$Aint)
snow <- temp.parms$ABCD
} else {
temp.parms <- parms[which(h < circle.radius),]
DA.1 <- abs(temp.parms$SqMi*2.58999 - basin_area)
temp.parms <- temp.parms[which(DA.1 == min(DA.1)),]
parameters <- c(temp.parms$A,temp.parms$B,temp.parms$C,temp.parms$D,temp.parms$Sint,temp.parms$Gint)
snow <- temp.parms$ABCD
}
}
}
###########
# start code to be replaced
#Define state of ABCDE model
Sint <- 202.6
Gint <- 73.4
Aint <- 28.3
###Define ABCDE model as a Function########################################3
ABCDE <- function(parameters,T,P,ET,Sint,Gint,Aint,calib_num) {
A <- array(0,calib_num)
S <- array(0,calib_num)
G <- array(0,calib_num)
y.hat <- array(0,calib_num)
Y <- array(0,calib_num)
W <- array(0,calib_num)
E <- array(0,calib_num)
mt <- array(0,calib_num)
Peff <- array(0,calib_num)
ETeff <- array(0,calib_num)
SNOW_FRAC <- array(0,calib_num)
a <- parameters[1]
b <- parameters[2]
c1 <- parameters[3]
d <- parameters[4]
e <- parameters[5]
f <- parameters[6]
dif <- parameters[7]
A[1] <- Aint
S[1] <- Sint
G[1] <- Gint
y.hat[1] <- 0
Y[1] <- 0
W[1] <- 0
E[1] <- 0
mt[1] <- 0
Peff[1] <- P[1]
ETeff[1] <- ET[1]
for (i in 2:calib_num){
#Snow Model
SNOW_FRAC[i] <- (f - T[i])/(dif)
if(T[i] >= (f-dif) && T[i] <= f){
mt[i] <- (A[i-1] + P[i]*SNOW_FRAC[i])*e*(1-SNOW_FRAC[i])
Peff[i] <- (P[i]*(1 - SNOW_FRAC[i]) + mt[i])
ETeff[i] <- 0
A[i] <- (A[i-1] + P[i]*SNOW_FRAC[i]) - mt[i]
} else if(T[i] > f) {
mt[i] <- A[i-1]
Peff[i] <- P[i]+mt[i]
ETeff[i] <- ET[i]
A[i] <- A[i-1] - mt[i]
} else {  #T[i] < (f-dif)
mt[i] <- 0
Peff[i] <- 0
ETeff[i] <- 0
A[i] <- A[i-1]+P[i]
}
#Begin ABCD Model
W[i] <- Peff[i] + S[i-1]
Y[i] <- (W[i]+b)/(2*a) - sqrt(((W[i]+b)/(2*a))^2-W[i]*b/a)
S[i] <- Y[i]*exp(-1*ETeff[i]/b)
E[i] <- Y[i]*(1-exp(-1*(ETeff[i]/b)))
G[i] <- (G[i-1] + c1*(W[i]-Y[i]))/(1+d)
y.hat[i] <- ((1-c1)*(W[i]-Y[i])+d*G[i])
}
return(y.hat)
}
###RUN the ABCDE Model Here##################################################################
stocflow <- ABCDE(parameters,stoc.weather$TAVG,stoc.weather$PRCP,stoc.weather$ET,Sint,Gint,Aint,s_calib_num)
histflow <- ABCDE(parameters,hist.weather$TAVG,hist.weather$PRCP,hist.weather$ET,Sint,Gint,Aint,h_calib_num)
#Define some conversion factors here
cfs_to_cmms <- 28316846.6 #this converts cubic feet per second to cubic millimeters per second
squaremi_to_sqmm <-  2589988110336 #this converts square miles to square millimeters
s_sec_to_month <- 86400*GCMDays$Days[613:1584] #this converts seconds to months
h_sec_to_month <- 86400*GCMDays$Days[1:744]
#we convert streamflow to mm
stocflow.cfs <- stocflow*1/cfs_to_cmms*(squaremi_to_sqmm)*1/s_sec_to_month*(basin_area)
histflow.cfs <- histflow*1/cfs_to_cmms*(squaremi_to_sqmm)*1/h_sec_to_month*(basin_area)
##Write out Monthly Streamflow TimeSeries
setwd(directory)
write.table(stocflow.cfs,"Stoc_Monthly_Streamflow.txt",row.names=FALSE,quote=FALSE,col.names=FALSE)
write.table(histflow.cfs,"Hist_Monthly_Streamflow.txt",row.names=FALSE,quote=FALSE,col.names=FALSE)
###Aggregate Streamflow to Seasonal Means for Fish Model
season.flow <- array(NA,c(972,4))
season.flow[,1] <- stoc.weather$MONTH
season.flow[,2] <- stoc.weather$YEAR
season.flow[,3] <- stocflow.cfs
season.flow[,4] <- seq(from=0,to=0,length=972)
loop.array <- array(0,c(12,2))
loop.array[,1] <- c(1,2,3,4,5,6,7,8,9,10,11,12)
loop.array[,2] <- c(4,4,4,1,1,2,2,2,3,3,3,4)
for (i in 1:12) {
season.flow[season.flow[,1] == loop.array[i,1],4] <- loop.array[i,2]  # winter
}
agg <-list(season.flow[,2],season.flow[,4])
tmp <- aggregate(season.flow,agg,mean)
seas.final <- cbind(tmp[order(tmp$Group.1,tmp$Group.2),1],tmp[order(tmp$Group.1,tmp$Group.2),2],tmp[order(tmp$Group.1,tmp$Group.2),5])
write.table(seas.final,"Seasonal_Streamflow.txt",row.names=FALSE,quote=FALSE,col.names=FALSE)
mon.stoc <- aggregate(stocflow.cfs,list(stoc.weather$MONTH),mean)
mon.hist <- aggregate(histflow.cfs,list(hist.weather$MONTH),mean)
max.y <- max(mon.hist,max(mon.stoc)+15)
### csv output and new plots
#what units are stocflow/histflow in?
h.flow<-hist.weather[,c("YEAR","MONTH")]
names(h.flow)<-c("year","month")
h.flow$Flow<-histflow
# h.flow$season_year<-h.flow$year
h.flow$season<-0
h.flow[h.flow$month %in% c(3,4,5),"season"]<-1
h.flow[h.flow$month %in% c(6,7,8),"season"]<-2
h.flow[h.flow$month %in% c(9,10,11),"season"]<-3
h.flow[h.flow$month %in% c(12,1,2),"season"]<-4
h.flow[h.flow$month==12,"year"]<-h.flow[h.flow$month==12,"year"]+1
h.seasonal<-aggregate(h.flow,by=list(Season=h.flow$season,Year=h.flow$year),FUN="mean")[,c(2,1,5)]
s.flow<-stoc.weather[,c("YEAR","MONTH")]
names(s.flow)<-c("year","month")
s.flow$Flow<-stocflow
# s.flow$season_year<-s.flow$year
s.flow$season<-0
s.flow[s.flow$month %in% c(3,4,5),"season"]<-1
s.flow[s.flow$month %in% c(6,7,8),"season"]<-2
s.flow[s.flow$month %in% c(9,10,11),"season"]<-3
s.flow[s.flow$month %in% c(12,1,2),"season"]<-4
s.flow[s.flow$month==12,"year"]<-s.flow[s.flow$month==12,"year"]+1
s.seasonal<-aggregate(s.flow,by=list(Season=s.flow$season,Year=s.flow$year),FUN="mean")[,c(2,1,5)]
for (i in 1:4) {
write.csv(h.seasonal[h.seasonal$Season==i,c("Year","Flow")],paste0("historic_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[s.seasonal$Season==i,c("Year","Flow")],paste0("stoch_season",i,"_flow.csv"),row.names = FALSE,quote=FALSE)
}
write.csv(h.seasonal[,c("Year","Flow")],paste0("historic_seasonal_flow.csv"),row.names = FALSE,quote=FALSE)
write.csv(s.seasonal[,c("Year","Flow")],paste0("stoch_seasonal_flow.csv"),row.names = FALSE,quote=FALSE)
getwd()
setwd("C:/Documents/GitHub/testing/temp_files")
load("met.Rdata")
final_met[1:10,1,]
dim(final_met)
150*12
dim(final_flow)
load("temp.Rdata")
load("flow.Rdata")
dim(final_flow)
dim(final_temp)
## set some options first
oopt = ani.options( interval = 0.8, nmax = length(xGCMOffset) )
## use a loop to create images one by one
saveHTML({
for (i in 1:ani.options("nmax")) {
print(i)
gcm <- data.frame(xx=rnorm(100,xGCMOffset[i],xGCMOffsetSD[i]),yy=rnorm(100,yGCMOffset[i],yGCMOffsetSD[i]))
print(
p+
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=20) +
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=10, colour='white')+
geom_point(data=gcm, aes(x=xx,y=yy), colour='yellow') +
geom_point( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue', size=3) +
geom_line( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue') +
scale_x_continuous('Standardized air temperature') +
scale_y_continuous('Standardized precipitation')+
ggtitle(i)
)
print(
ggplot(pExtinct[1:i,], aes(x,y))+
geom_point()+
scale_x_continuous(lim=c(0,ani.options("nmax")), 'Time') +
scale_y_continuous(lim=c(0,1.1), 'Proportion of gcm > lambda=1')+
theme(axis.title.x = element_text( size=10 ),
axis.title.y = element_text( size=10 )),
vp = vp
)
#theme_set(theme_bw())
ani.pause() ## pause for a while (’interval’)
}
},
img.name = "countourPlots", imgdir = "plots", htmlfile = "random1.html",
autobrowse = TRUE,
verbose=FALSE
)
library(ggplot2)
library(fMultivar)
library(animation)
library(grid)
setwd("C:/Documents/GitHub/testing/temp_files/from Ben")
load("gcmData.RData")
load("tempGCMData.RData")
xOffsetContour <- -1
yOffsetContour <- -1
currentOffset <- 0.25
xGCMOffset <- seq( xOffsetContour+currentOffset,0.51,0.1 )
yGCMOffset <- seq( yOffsetContour+currentOffset,0.51,0.1 )
xGCMOffsetSD <- seq( 0.04,0.45,length.out=length(xGCMOffset) )
yGCMOffsetSD <- seq( 0.04,0.51,length.out=length(yGCMOffset) )
x = (-20:20)/10
X = grid2d(x)
z = dnorm2d(X$x-xOffsetContour, X$y-yOffsetContour, rho = -0.65)
#Z = list(x = x, y = x, z = matrix(z, ncol = length(x)))
#Z = data.frame(x = x, y = x, z = matrix(z, ncol = length(x)))
#persp(Z, theta = -40, phi = 30, col = "steelblue")
ggZ <- data.frame(cbind(x=X$x, y=X$y, z=z))
p <- ggplot(data=ggZ, aes(x=x,y=y)) +
geom_tile(aes(fill = z)) +
stat_contour(data=ggZ,aes(z=z)) +
stat_contour(data=ggZ,aes(z=z), bins=1.8, colour='white', size=2)
# in new version of ggplot, need to separate lines with different dimensions in the aes()
xSlope <- 0.2; ySlope <- 0.1
xInt <- xOffsetContour+currentOffset
yInt <- yOffsetContour+currentOffset
lineTrace <- data.frame(index = ( 0:( length(xGCMOffset) -1 ) ))
lineTrace$x = lineTrace$index * xSlope + xInt
lineTrace$y = lineTrace$index * ySlope + yInt
pExtinct <- data.frame( x=1:( length(xGCMOffset)) )
pExtinct$y <- pExtinct$x*0.1
################
# set viewport to insert second graph
vp <- viewport(width = 0.3, height = 0.3, x = 0.97, y = unit(0.9, "lines"), just = c("right","bottom"))
## set some options first
oopt = ani.options( interval = 0.8, nmax = length(xGCMOffset) )
## use a loop to create images one by one
saveHTML({
for (i in 1:ani.options("nmax")) {
print(i)
gcm <- data.frame(xx=rnorm(100,xGCMOffset[i],xGCMOffsetSD[i]),yy=rnorm(100,yGCMOffset[i],yGCMOffsetSD[i]))
print(
p+
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=20) +
geom_point(aes(xOffsetContour+currentOffset,yOffsetContour+currentOffset), size=10, colour='white')+
geom_point(data=gcm, aes(x=xx,y=yy), colour='yellow') +
geom_point( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue', size=3) +
geom_line( data=lineTrace[1:i,], aes(x=x,y=y), colour='lightblue') +
scale_x_continuous('Standardized air temperature') +
scale_y_continuous('Standardized precipitation')+
ggtitle(i)
)
print(
ggplot(pExtinct[1:i,], aes(x,y))+
geom_point()+
scale_x_continuous(lim=c(0,ani.options("nmax")), 'Time') +
scale_y_continuous(lim=c(0,1.1), 'Proportion of gcm > lambda=1')+
theme(axis.title.x = element_text( size=10 ),
axis.title.y = element_text( size=10 )),
vp = vp
)
#theme_set(theme_bw())
ani.pause() ## pause for a while (’interval’)
}
},
img.name = "countourPlots", imgdir = "plots", htmlfile = "random1.html",
autobrowse = TRUE,
verbose=FALSE
)
setwd("C:/Documents/GitHub/testing/r")
testingargs<-list(basin_dir="C:/Documents/GitHub/somepath/basins",
run_dir="C:/Documents/GitHub/testing/somepath2/runs/historic",
data_dir="C:/Documents/GitHub/somepath/data")
rm(list=ls())
rm(list=ls())
setwd("C:/Documents/GitHub/testing/r")
testingargs<-list(basin_dir="C:/Documents/GitHub/somepath/basins",run_dir="C:/Documents/GitHub/testing/somepath2/runs/14",data_dir="C:/Documents/GitHub/somepath/data")
source("StreamFlowModel.R")
