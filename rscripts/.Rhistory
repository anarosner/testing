#but are not included in param file
#an earlier version required that the param and
#missing.param<-function(param,config) {
#req<-parse.config.setting(config,"required")
req<-parse.config.setting("required")
req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i,"name"] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(req[missing,"name"])
else
return(NULL)
}
missing.param()
missing.param<-function() {
#returns a list of names of parameters that are required (according to config file),
#but are not included in param file
#an earlier version required that the param and
#missing.param<-function(param,config) {
#req<-parse.config.setting(config,"required")
req<-parse.config.setting("required")
req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i][[1]]["name"] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(req[missing,"name"])
else
return(NULL)
}
missing.param()
a[1]
a<-parse.config.setting("required")
a
a[a$value==1]
a[][[1]]$value
a[][[1]]["value"]
a[1][[1]]["value"]
a[a]
a[1]
a[1]["value"]
a[1]$value
a[1][[1]]$value
a[1][[1]]
a[][[1]]
a[1:length(a)][[1]]
a[1:length(a)]
a[1:length(a)]==1
config<-fromJSON(file="weather_generator.config")
a<-parse.config.setting(config,"required")
a<-parse.config.setting("required")
a
setwd("C:/ALR/WebAppCode/")
config<-fromJSON(file="weather_generator.json")
setwd("C:/ALR/WebAppCode/")
config<-fromJSON(file="weather_generator.json")
param.w.missing<-fromJSON(file="rmodels/settings5.json")
config<-fromJSON(file="rmodels/weather_generator.json")
parse.config.setting("required")
a<-parse.config.setting("required")
a[1:length(a)]==1
a[a[1:length(a)]==1]
names(a[1:length(a)]==1)
names(a[a[1:length(a)]==1)]
names(a[a[1:length(a)]==1])
names(a)
names(config[1])
names(config[4])
names(config[4][[1]])
config[4][[1]]
config[4]
names(config[4])
names(config[4][[1]])
config["userid"]
config["userid"][[1]]
config["userid"][[1]]["required"]
config["userid"][[1]]["required"][[1]]
names(config[4][[1]])
a<-names(config[4])
a
b<-list()
b
b[a]<-1
b
b[a]<-config[4][[1]][a]
b
b[a]<-config[4][[1]][a][[1]]
b
a
config[4]
b<-list()
b[names(config[4])]<-config[4][[1]]["userid"][[1]]
b
b[names(config[4])]<-1
b
b[names(config[4])]<-config[4][[1]]["userid"]
b
b[names(config[4])]<-config[4][[1]]["required"][[1]]
b
b[names(config[4])]<-config[4][[1]]["description"][[1]]
b
a
a<-names(config[4])
a
b[a]<-config[4][[1]]["description"][[1]]
b
a<-config[4]
b[names(a)]<-a[[1]]["description"][[1]]
b
parse.config.setting<-function(setting,value=null) {
#parses out any specified parameter from json object
#returns a list of those parameters and their config setting (specified here)
#if value != null, returns only those where the setting is equal to the specified value
#  i.e. required == 1
config.setting<-list()
for (i in 1:length(config)) {
if( setting %in% names(config[i][[1]]) ) {
config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
#config.setting[names(config[i])]<-config[names(config[i])][[1]][setting][[1]]
#         config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
}
}
return(config.setting)
}
parse.config.setting("default")
parse.config.setting("default")[[1]]
names(parse.config.setting("default"))
parse.config.setting("required")[[1]]
parse.config.setting("required")
parse.config.setting<-function(setting,value=null) {
#parses out any specified parameter from json object
#returns a list of those parameters and their config setting (specified here)
#if value != null, returns only those where the setting is equal to the specified value
#  i.e. required == 1
r<-list()
for (i in 1:length(config)) {
if( setting %in% names(config[i][[1]]) ) {
r[names(config[i])]<-config[i][[1]][setting][[1]]
#config.setting[names(config[i])]<-config[names(config[i])][[1]][setting][[1]]
#         config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
}
}
if (is.null(value))
return(r)
else
r[r[1:length(r)]==value]
}
parse.config.setting("default")
parse.config.setting<-function(setting,value=NULL) {
#parses out any specified parameter from json object
#returns a list of those parameters and their config setting (specified here)
#if value != null, returns only those where the setting is equal to the specified value
#  i.e. required == 1
r<-list()
for (i in 1:length(config)) {
if( setting %in% names(config[i][[1]]) ) {
r[names(config[i])]<-config[i][[1]][setting][[1]]
#config.setting[names(config[i])]<-config[names(config[i])][[1]][setting][[1]]
#         config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
}
}
if (is.null(value))
return(r)
else
r[r[1:length(r)]==value]
}
parse.config.setting("default")
parse.config.setting("required")
parse.config.setting("required",value=1)
parse.config.setting<-function(setting,value=NULL) {
#parses out any specified parameter from json object
#returns a list of those parameters and their config setting (specified here)
#if value != null, returns only those where the setting is equal to the specified value
#  i.e. required == 1
r<-list()
for (i in 1:length(config)) {
if( setting %in% names(config[i][[1]]) ) {
r[names(config[i])]<-config[i][[1]][setting][[1]]
#config.setting[names(config[i])]<-config[names(config[i])][[1]][setting][[1]]
#         config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
}
}
if (is.null(value))
return(r)
else
names(r[r[1:length(r)]==value])
}
parse.config.setting("required",value=1)
parse.config.setting("required")
class(parse.config.setting("required"))
class(parse.config.setting("required")[1])
class(parse.config.setting("required")[1][[1]])
class(parse.config.setting("required",value=0))
parse.config.setting("required",value=0)
class(parse.config.setting("required",value=1))
parse.config.setting("required",value=1)
length(parse.config.setting("required",value=1))
a<-parse.config.setting("required",value=1)
a
class(a)
str(a)
parse.config.setting<-function(setting,value=NULL) {
#parses out any specified parameter from json object
#returns a list of those parameters and their config setting (specified here)
#if value != null, returns only those where the setting is equal to the specified value
#  i.e. required == 1
r<-list()
for (i in 1:length(config)) {
if( setting %in% names(config[i][[1]]) ) {
r[names(config[i])]<-config[i][[1]][setting][[1]]
#config.setting[names(config[i])]<-config[names(config[i])][[1]][setting][[1]]
#         config.setting[names(config[i])]<-config[i][[1]][setting][[1]]
}
}
if (is.null(value))
return(r)
#standard option, return the list of lists
else
names(r[r[1:length(r)]==value])
#if value is specified, return array of names of parameters where the setting = specified value
}
missing.param()
missing.param<-function() {
#returns an array of names of parameters that are required (according to config file),
#but are not included in param file
req<-parse.config.setting("required",value=1)
#req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(req[missing,"name"])
else
return(NULL)
}
missing.param()
missing.param<-function() {
#returns an array of names of parameters that are required (according to config file),
#but are not included in param file
req<-parse.config.setting("required",value=1)
#req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(names(req[missing])
else
return(NULL)
}
missing.param<-function() {
#returns an array of names of parameters that are required (according to config file),
#but are not included in param file
req<-parse.config.setting("required",value=1)
#req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return( names(req[missing]) )
else
return(NULL)
}
missing.param()
param<-param.w.missing
missing.param()
missing.param<-function() {
#returns an array of names of parameters that are required (according to config file),
#but are not included in param file
req<-parse.config.setting("required",value=1)
#req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(missing)
#      return( names(req[missing]) )
else
return(NULL)
}
missing.param()
param<-param.no.missing
missing.param()
param.w.missing<-fromJSON(file="settings5.json")
param<-param.w.missing
missing.param()
setwd("C:/ALR/WebAppCode/")
param.w.missing<-fromJSON(file="settings5.json")
param<-param.w.missing
param.w.missing<-fromJSON(file="settings5.json")
param<-param.w.missing
missing.param()
missing.param<-function() {
#returns an array of names of parameters that are required (according to config file),
#but are not included in param file
req<-parse.config.setting("required",value=1)
#req<-req[req$value==1]
missing<-c()
for(i in 1:length(req)) {
if (!(req[i] %in% names(param)))
missing<-c(missing,i)
}
if (length(missing)>0)
return(req[missing])
#      return( names(req[missing]) )
else
return(NULL)
}
missing.param()
config<-fromJSON(file="rmodels/weather_generator.json")
param.w.missing<-fromJSON(file="settings5.json")
param.no.missing<-fromJSON(file="settings4.json")
param<-param.w.missing
missing.param()
param<-param.no.missing
missing.param()
source('~/GitHub/testing/rscripts/param.functions.R')
source('~/GitHub/testing/rscripts/param.functions.R', echo=TRUE)
source('~/GitHub/testing/rscripts/param.functions.R')
source('~/GitHub/testing/rscripts/weather_generator.R')
source('~/GitHub/testing/rscripts/weather_generator.R')
source('~/GitHub/testing/rscripts/Hargreaves.R')
source('~/GitHub/testing/rscripts/weather_generator.R')
source('~/WebAppCode/json test6.R')
source('~/WebAppCode/accessing json in r notes.R')
config$pre_step
config
setwd("C:/GitHub/testing/rscripts")
setwd("C:/ALR/GitHub/testing/rscripts")
config<-fromJSON(file="rmodels/weather_generator.json")
config<-fromJSON(file="weather_generator.json")
config$pre_step
req<-config$pre_step
pre<-parse.param("previousrun")
setwd("C:/ALR/GitHub/testing/rscripts")
setwd("C:/ALR/GitHub/testing")
config<-fromJSON(file="/rscripts/weather_generator.json")
getwd()
setwd("C:/ALR/GitHub/testing/rscripts")
config<-fromJSON(file="weather_generator.json")
setwd("C:/ALR/WebAppCode/")
param.w.missing<-fromJSON(file="settings5.json")
param.no.missing<-fromJSON(file="settings4.json")
param<-param.w.missing
missing.param()
source("param.functions.R")
getwd()
setwd("C:/ALR/GitHub/testing/rscripts")
config<-fromJSON(file="weather_generator.json")
source("param.functions.R")
setwd("C:/ALR/WebAppCode/")
param.w.missing<-fromJSON(file="settings5.json")
param.no.missing<-fromJSON(file="settings4.json")
param<-param.w.missing
missing.param()
param<-param.no.missing
missing.param()
setwd("C:/ALR/GitHub/testing")
req<-config$pre_step
pre<-parse.param("previousrun")
setwd("C:/ALR/GitHub/testing/runs/1234/1009")
param<-fromJSON(file="settings.json")
req<-config$pre_step
pre<-parse.param("pre_run")
pre<-parse.param("pre_run","tree")
pre<-parse.param("pre_run")
names(param)
pre<-parse.param("pre_run")
setwd("C:/ALR/GitHub/testing/rscripts")
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
pre<-parse.param("pre_run")
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
setwd("C:/ALR/GitHub/testing/rscripts")
config<-fromJSON(file="weather_generator.json")
setwd("C:/ALR/GitHub/testing/runs/1234/1009")
param<-fromJSON(file="settings.json")
req<-config$pre_step
pre<-parse.param("pre_run")
a<-list(c[1,2,3],"jij")
a<-list(c[1,2,3],"jij"))
a<-list( c[1,2,3],"jij")
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
pre<-parse.param("pre_run")
param$pre_run
class(param$pre_run)
length(param$pre_run)
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
pre<-parse.param("pre_run")
a<-list("sf",453,as.array(c(1,2,4)))
a
setwd("C:/ALR/GitHub/testing/rscripts")
source("param.functions.R")
pre<-parse.param("pre_run")
param$userid
length(param$userid)
length(param$pre_run)
a<-list(param$userid,param$nyears,as.array(param$pre_run))
a
a<-list(param$userid,param$nyears,as.array(param["pre_run"]))
a
a<-list(param$userid,param$nyears,as.array(param["pre_run"][[1]]))
a
source("param.functions.R")
pre<-parse.param("pre_run")
source("param.functions.R")
source("param.functions.R")
pre<-parse.param("pre_run")
source("param.functions.R")
pre<-parse.param("pre_run")
a<-list()
a["booo"]<-list(param$userid,param$nyears,as.array(param["pre_run"][[1]]))
a$booo<-list(param$userid,param$nyears,as.array(param["pre_run"][[1]]))
a["booo"][[1<-list(param$userid,param$nyears,as.array(param["pre_run"][[1]]))
a["booo"][[1]]<-list(param$userid,param$nyears,as.array(param["pre_run"][[1]]))
a
source("param.functions.R")
pre<-parse.param("pre_run")
parse.param("userid")
pre
parse.param("userid","pre_run")
source("param.functions.R")
parse.param("userid","pre_run")
parse.param("userid")
source("param.functions.R")
parse.param("userid")
parse.param("userid",values.only=F)
parse.param("userid","pre_run")
pre<-parse.param("pre_run")
source("param.functions.R")
parse.param("userid")
parse.param("userid",values.only=F)
parse.param("userid","basinid")
a
length(a)
length(a)==1
parse.param("userid","basinid")
source("param.functions.R")
parse.param("userid","basinid")
source("param.functions.R")
parse.param("userid","pre_run")
1==1 & 2==2
1==1 & T
source("param.functions.R")
parse.param("userid","pre_run")
parse.param(c("userid","pre_run")
parse.param(c("userid","pre_run"))
parse.param(c("userid","basinid"))
source("param.functions.R")
parse.param("pre_run")
source("param.functions.R")
parse.param("pre_run")
parse.param(c("userid","pre_run"))
print(param[param.name[i]][[1]])
a<-parse.param(c("userid","pre_run"))
source("param.functions.R")
parse.param("pre_run")
source("param.functions.R")
parse.param("pre_run")
source("param.functions.R")
a<-parse.param("pre_run")
source("param.functions.R")
a<-parse.param("pre_run")
a
b<-parse.param(c("userid","pre_run"))
b
c<-parse.param("pre_run",values.only=F)
c
source("param.functions.R")
a<-parse.param("pre_run")
a
b<-parse.param(c("userid","pre_run"))
b
c<-parse.param("pre_run",values.only=F)
c
a
class(a)
a<-list()
a$b<-c(1,2,3)
a
source("param.functions.R")
a<-parse.param("pre_run")
a
b<-parse.param(c("userid","pre_run"))
b
c<-parse.param("pre_run",values.only=F)
c
b<-parse.param(c("userid","pre_run","nyears"))
b
b<-parse.param(c("pre_run","nyears"))
b
req<-config$pre_step
pre<-parse.param("pre_run")
req
pre
